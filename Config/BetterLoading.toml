# Enable verbose logging for BetterLoading. This is useful for debugging, but may slow down the game.
VerboseLogging = false
# The TipCache caches information about loading screen tips so that they can be displayed as soon as the loading screen starts after the first run.
[TipCache]
# The internal version number of the TipCache tip blob. If this number is different from the one expected by the mod, the TipCache will be cleared.
Version = 1
# The raw tip blob. NOT intended to be manually edited.
Tips = ""

