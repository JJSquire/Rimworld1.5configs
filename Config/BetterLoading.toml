# Enable verbose logging for BetterLoading. This is useful for debugging, but may slow down the game.
VerboseLogging = false
# The TipCache caches information about loading screen tips so that they can be displayed as soon as the loading screen starts after the first run.
[TipCache]
# The internal version number of the TipCache tip blob. If this number is different from the one expected by the mod, the TipCache will be cleared.
Version = 1
# The raw tip blob. NOT intended to be manually edited.
Tips = "UGxhY2UgdGhlIGNhcmF2YW4gaGl0Y2hpbmcgc3BvdCB3aGVyZSB5b3Ugd2FudCB5b3VyIGNhcmF2YW5zIHRvIGZvcm0gdXAuIEl0J3MgdXN1YWxseSBiZXN0IHRvIHBsYWNlIGl0IG5lYXIgeW91ciBzdG9yYWdlIGFyZWFzLgFDb3JlAEVuZW15IHNoaXBzIHdpbGwgbGF1bmNoIGJvYXJkaW5nIHBhcnRpZXMgb25jZSB0aGVpciB3ZWFwb25zIGhhdmUgYnJva2VuIHlvdXIgaHVsbC4gWW91IGNhbiB1c2UgcG9pbnQtZGVmZW5zZSB3ZWFwb25zIHRvIGhlbHAgcmVwZWwgYm9hcmRlcnMuAVNhdmUgT3VyIFNoaXAgMgBUaGUgRW5jbGF2ZSBpcyBhIHBvc3QtV2FyIGluc3RpdHV0aW9uIHRoYXQgZGV2ZWxvcGVkIGZyb20gY29udGludWl0eSBvZiBnb3Zlcm5tZW50IG9mIHRoZSBwcmUtV2FyIGZlZGVyYWwgZ292ZXJubWVudCBvZiB0aGUgVW5pdGVkIFN0YXRlcyBvZiBBbWVyaWNhLCBmcmVxdWVudGx5IHN0eWxpbmcgaXRzZWxmIGFzIHRoZSBVbml0ZWQgU3RhdGVzIG9mIEFtZXJpY2EuAVRoZSBCcm90aGVyaG9vZCBDb21wZW5kaXVtICJDb250aW51ZWQiAFNsb3NoaW5nIHRocm91Z2ggd2F0ZXIgbWFrZXMgcGVvcGxlIHVuaGFwcHkuIEJ1aWxkIGEgYnJpZGdlIHdoZW4geW91IGNhbi4BQ29yZQBZb3UgY2FuIGRpc21pc3MgbGV0dGVycyBhbmQgbWVzc2FnZXMgYnkgcmlnaHQtY2xpY2tpbmcgb24gdGhlbS4BQ29yZQBBcmNob3RlY2ggc3BvcmVzIGFyZSB0ZW1wZXJhbWVudGFsIGJlaW5ncywgYW5kIHdpbGwgcGxheSAicHJhbmtzIiBvbiB0aGVpciBjcmV3IGlmIHRoZWlyIG1vb2QgZGlwcyB0b28gbG93LgFTYXZlIE91ciBTaGlwIDIAWW91IGNhbiBhbmFseXplIHRoZSBjaGFuY2UgYSBzaG90IHdpbGwgaGl0IGJ5IHNlbGVjdGluZyB0aGUgc2hvb3RlciBhbmQgcGxhY2luZyB0aGUgbW91c2Ugb3ZlciB0aGUgdGFyZ2V0LgFDb3JlAEJlc3RpYWxpdHkgaXMgZGlzYWJsZWQgYnkgZGVmYXVsdC4gSXQgY2FuIGJlIGVuYWJsZWQgaW4gUmltSm9iV29ybGQgbW9kIHNldHRpbmdzLgFSaW1Kb2JXb3JsZABSaW1Kb2JXb3JsZCBydW5zIG9uIHBvcm4gbG9naWMuAVJpbUpvYldvcmxkAFlvdSBjYW4gc2VsZWN0IHRoZSBwcmV2aW91cyBvciBuZXh0IGNvbG9uaXN0IHdpdGggdGhlICwgYW5kIC4ga2V5cy4BQ29yZQBZb3UgY2FuIGhvbGQgdGhlIHNoaWZ0IGtleSB0byBxdWV1ZSBvcmRlcnMgb24geW91ciBjb2xvbmlzdHMuAUNvcmUAVGhlIEJyb3RoZXJob29kIG9mIFN0ZWVsIGZpZXJjZWx5IHByb3RlY3RzIGl0cyBrbm93bGVkZ2UuIE5ldmVydGhlbGVzcywgc29tZSBleG90aWMgbWVyY2hhbnRzIGNhbiBzdGlsbCBnaXZlIHlvdSBhY2Nlc3MgdG8gdGhlaXIgdGVjaG5vbG9naWVzLgFUaGUgQnJvdGhlcmhvb2QgQ29tcGVuZGl1bSAiQ29udGludWVkIgBUaGUgbGV0aGFsaXR5IG9mIGV4ZWN1dGlvbiBhbmltYXRpb25zIGNhbiBiZSBhZGp1c3RlZCBpbiB0aGUgbW9kIHNldHRpbmdzLgFNZWxlZSBBbmltYXRpb24ATW91bnRhaW4gYmFzZXMgYXJlIGVhc3kgdG8gZGVmZW5kLiBUaGUgZG93bnNpZGUgaXMgdGhhdCBwZW9wbGUgZ28gY3Jhenkgc3BlbmRpbmcgdG9vIGxvbmcgdW5kZXJncm91bmQuIEFuZCBnaWFudCBpbnNlY3RzLgFDb3JlAFRoZSBQc3ljaGljIEZsYXllciBpcyBhIGRyZWFkZWQgd2VhcG9uIGVtcGxveWVkIGJ5IHRoZSBtb3N0IGFkdmFuY2VkIHN0YXJzaGlwcy4gSXQgY2FuIHN0dW4gZG96ZW5zIG9mIGNyZXcgYXQgb25jZSwgYWxsb3dpbmcgYm9hcmRpbmcgcGFydGllcyB0byBkbyB0aGVpciB3b3JrIHVub3Bwb3NlZC4BU2F2ZSBPdXIgU2hpcCAyAEFuIGFyY2hvdGVjaCBzcG9yZSB3aWxsIHNvbWV0aW1lcyBvZmZlciBpdHMgaHVtYW4gcHJvZ2VuaXRvcnMgZ2lmdHMuIFRoZSBtb3JlIHRlY2hub2xvZ2llcyBpdCBoYXMgdW5sb2NrZWQsIHRoZSBtb3JlIGdpZnRzIGFyZSBhdmFpbGFibGUuAVNhdmUgT3VyIFNoaXAgMgBWYWN1dW0gZXhwb3N1cmUgaXMgbm90IGZ1bi4gQmUgc3VyZSB0byBoYXZlIEVWQSBzdWl0cyBvbiBoYW5kIGluIGNhc2Ugb2YgYSBodWxsIGJyZWFjaC4BU2F2ZSBPdXIgU2hpcCAyAEN5YmVyaXphdGlvbiBvZiB0aGUgYnJhaW4gYWxsb3dzIHRoZSB1c2VyIHRvIGNvbm5lY3QgdG8gdGhlIHBlcnZhc2l2ZSBuZXQuIFRoaXMgY2FuIGxldCB0aGUgdXNlciBhY2Nlc3MgZGF0YWJhc2VzIHRvIGJvb3N0IGNlcnRhaW4gc2tpbGxzIGZvciBzb21lIHRpbWUsIG9yIGV2ZW4gY29ubmVjdCB3aXRoIG90aGVycyBpbiBjb21iYXQuAUdpVFMgQ3liZXJicmFpbnMAU2hpcCByZWFjdG9ycyBjYW4gYmUgb3ZlcmRyaXZlbiwgaW5jcmVhc2luZyB0aGVpciBwb3dlciBvdXRwdXQgYXQgdGhlIHJpc2sgb2YgZmlyZSBhbmQgcmFkaWF0aW9uIGV4cG9zdXJlLgFTYXZlIE91ciBTaGlwIDIAQXZvaWQgdXNpbmcgc3RvbmUgZm9yIGRvb3JzLiBUaGV5IG9wZW4gdmVyeSBzbG93bHksIHdoaWNoIHdhc3RlcyB5b3VyIGNvbG9uaXN0cycgdGltZS4BQ29yZQBEZWVwIHVuZGVyZ3JvdW5kIGNhdmVybnMgaGF2ZSBhIG5hdHVyYWxseSBzdGFibGUgdGVtcGVyYXR1cmUsIGV2ZW4gaWYgaXQncyB2ZXJ5IGhvdCBvciBjb2xkIG91dHNpZGUuAUNvcmUAUmltSm9iV29ybGQgaGFzIGJpcnRoIGFuZCBwcmVnbmFuY3kgZmVhdHVyZXMsIGJ1dCBubyBiYWJpZXMuIENoaWxkcmVuIHdpbGwgYmUgYm9ybiBmdWxseSBncm93biB1bmxlc3MgeW91IGhhdmUgYW5vdGhlciBtb2QgdGhhdCBjaGFuZ2VzIHRoYXQuAVJpbUpvYldvcmxkAERyZXNzaW5nIHlvdXIgcHN5Y2FzdGVycyBpbiBlbHRleCBnZWFyIHdpbGwgaW5jcmVhc2UgdGhlaXIgbmV1cmFsIGhlYXQgbGltaXQgYW5kIGRpc3NpcGF0aW9uIHJhdGUuAVJveWFsdHkARWFjaCBjb2xvbmlzdHMnIG1vb2QgaXMgZGlzcGxheWVkIGluIHRoZSBiYWNrZ3JvdW5kIG9mIHRoZWlyIGljb24gaW4gdGhlIGNvbG9uaXN0IGJhciBhdCB0aGUgdG9wIG9mIHRoZSBzY3JlZW4uAUNvcmUAQmUgY2FyZWZ1bCB3aGF0IHlvdSBjb25zdHJ1Y3Qgb24gYnJpZGdlcy4gQnJpZGdlcyBjb2xsYXBzZSBlYXNpbHkgdW5kZXIgZXhwbG9zaW9ucywgYW5kIHlvdXIgYnVpbGRpbmdzIHdpbGwgZ28gd2l0aCB0aGVtLgFDb3JlAEdvaW5nIG92ZXIgeW91ciBuZXVyYWwgaGVhdCBsaW1pdCBjYW4gc2F2ZSB5b3UgaW4gYSBkZXNwZXJhdGUgc2l0dWF0aW9uIC0gYnV0IHRoZSBwc3ljaGljIGJyZWFrZG93biBjYW4gbGFzdCBhIHdoaWxlLgFSb3lhbHR5AENsZXZlciBzdGFyc2hpcCBjYXB0YWlucyBjYW4gaGlqYWNrIGFuY2llbnQgc2F0ZWxsaXRlcyB0byBjb250cm9sIHdlYXRoZXIgb3IgYm9tYmFyZCB0aGVpciBmb2VzLiBUaGlzIHJpc2tzIHRyaWdnZXJpbmcgbWVjaGFub2lkLWJhc2VkIGRlZmVuc2VzLCBob3dldmVyLi4uAVNhdmUgT3VyIFNoaXAgMgBUaGUgbW9yZSBmYWN0aW9ucyB5b3UgYXJlIGFsbGllZCB3aXRoLCB0aGUgbW9yZSByYW5kb20gdHJhZGVycyBhbmQgbWlsaXRhcnkgYWlkIHlvdSB3aWxsIHJlY2VpdmUuAUNvcmUASW4gdGhlIHdvcmsgdGFiJ3MgbWFudWFsIHByaW9yaXRpZXMgbW9kZSwgMSBpcyBmaXJzdCBwcmlvcml0eSwgd2hpbGUgNCBpcyBsYXN0IHByaW9yaXR5LgFDb3JlACJBcmNob2xpZmUiIGNyZWF0dXJlcyB3ZXJlIGRlc2lnbmVkIGJ5IGFuIGFyY2hvdGVjaCBzcG9yZS4gVGhleSByZXNlbWJsZSBtdW5kYW5lIGFuaW1hbHMgYnV0IGRvIG5vdCBuZWVkIHRvIGVhdCwgYXJlIGVmZmVjdGl2ZWx5IGltbW9ydGFsLCBhbmQgZXZlbiBnZW5lcmF0ZSBhIHNoaWVsZCBpbiBjb21iYXQuAVNhdmUgT3VyIFNoaXAgMgBVc2luZyBhIHBzeWNoaWMgcG93ZXIgb24gYW4gYWxseSB3aWxsIGhhcm0gZmFjdGlvbiByZWxhdGlvbnMgLSBidXQgb25seSBpZiBpdCBoYXMgbmVnYXRpdmUgZWZmZWN0cy4BUm95YWx0eQBVbmxlc3MgeW91IHByb3ZlIHlvdXIgQW1lcmljYW4gY2l0aXplbnNoaXAsIHRoZSBFbmNsYXZlIHdpbGwgYWx3YXlzIGJlIGhvc3RpbGUgdG8geW91LiBXaGVuZXZlci4gRm9yIHdoYXRldmVyIHJlYXNvbi4BVGhlIEJyb3RoZXJob29kIENvbXBlbmRpdW0gIkNvbnRpbnVlZCIAU29tZSBhbmltYWxzIGV4cGxvZGUgdXBvbiBkZWF0aC4gWW91IGNhbiB1c2UgdHJhbnNwb3J0IHBvZHMgdG8gZHJvcCBhbmltYWxzIG9uIGVuZW1pZXMuIFRoaW5rIGFib3V0IGl0LgFDb3JlAE1lY2hhbmljYWwgc3RydWN0dXJlcyBicmVhayBkb3duIGFuZCByZXF1aXJlIHJlcGxhY2VtZW50IGNvbXBvbmVudHMuIERvbid0IGJ1aWxkIHRoaW5ncyB5b3UgZG9uJ3QgbmVlZC4BQ29yZQBTaHV0dGxlcyBjYW4gZGVsaXZlciBib2FyZGluZyBwYXJ0aWVzIHRvIGFuIGVuZW15IHNoaXAsIGJ1dCBhcmUgdnVsbmVyYWJsZSB0byBwb2ludC1kZWZlbnNlIHdlYXBvbnJ5LiBBcm1vciBhbmQgc2hpZWxkIHVwZ3JhZGVzIGdvIGEgbG9uZyB3YXkgdG8gcHJvdGVjdGluZyB5b3VyIGJvYXJkaW5nIHNodXR0bGVzLgFTYXZlIE91ciBTaGlwIDIAVGhhbmtzIHRvIGh5ZHJvcG9uaWNzIGFuZCBhcnRpZmljaWFsIHNvaWwgc3Vic3RyYXRlcywgaXQgaXMgcG9zc2libGUgdG8gYnVpbGQgYSBmdWxseSBzZWxmLXN1c3RhaW5pbmcgY29sb255IGluIG9yYml0LgFTYXZlIE91ciBTaGlwIDIAQ2xlYW4gcm9vbXMgaW5jcmVhc2UgcmVzZWFyY2ggc3BlZWQsIGltcHJvdmUgbWVkaWNhbCBvdXRjb21lcywgYW5kIHJlZHVjZSBmb29kIHBvaXNvbmluZy4gU3RlcmlsZSB0aWxlcyBtYWtlIHJvb21zIGV4dHJhLWNsZWFuLgFDb3JlAE9uY2UgaW4gb3JiaXQsIGNvbG9uaXN0cyBjYW4gc2NhbiBhdCBhIHNoaXAncyBzY2llbmNlIGNvbnNvbGUgdG8gZGlzY292ZXIgb3JiaXRhbCBxdWVzdCBzaXRlcy4gU2VuZCBjb2xvbmlzdHMgaW4gYSBzaHV0dGxlIHRvIHZpc2l0IHRoZW0uAVNhdmUgT3VyIFNoaXAgMgBHZXlzZXJzIGhlYXQgdXAgcm9vbXMgaWYgZW5jbG9zZWQuIFRoaXMgY2FuIGJlIGRhbmdlcm91cywgb3IgdXNlZnVsLgFDb3JlAFRoZSBTZXR0aW5ncyBmb3IgQW5pbWFsLUdlbmUgSW5oZXJpdGFuY2UgYXJlIGRpc3RyaWJ1dGVkIGJldHdlZW4gUkpXLVByZWduYW5jeS1TZXR0aW5ncyBhbmQgdGhlaXIgb3duIE1vZC1PcHRpb25zLgFSSlcgR2VuZXMAU2hpcCBzZW5zb3JzIGFuZCBzY2llbmNlIGNvbnNvbGVzIGNhbiByZW1vdGVseSBvYnNlcnZlIHNvbWUgbWFwcywgYWxsb3dpbmcgeW91IHRvIHBsYW4gYXR0YWNrcyBpbiBhZHZhbmNlIG9yIHNjb3V0IGxhbmRpbmcgc2l0ZXMuAVNhdmUgT3VyIFNoaXAgMgBUaGUgcHN5Y2hpYyBza2lwIHBvd2VyIHdvcmtzIG9uIHNlbGYsIGFsbGllcywgZW5lbWllcywgYW5kIGV2ZW4gaXRlbXMuIFRoZSB0YWN0aWNhbCBwb3NzaWJpbGl0aWVzIGFyZSBlbmRsZXNzLgFSb3lhbHR5AFJpbUpvYldvcmxkIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggdGhlICJQcmVwYXJlIENhcmVmdWxseSIgbW9kLiBJc3N1ZXMgcmFuZ2UgZnJvbSBzZXggcGFydHMgZGlzYXBwZWFyaW5nIHRvIGJhYmllcyBiZWluZyBib3JuIHdpdGggdGhlIHdyb25nIHJhY2UuAVJpbUpvYldvcmxkAFRoZSBCcm90aGVyaG9vZCBvZiBTdGVlbCBpcyBhIHF1YXNpLXJlbGlnaW91cyB0ZWNobm9jcmF0aWMgbWlsaXRhcnkgb3JkZXIsIGZvdW5kZWQgaW4gMjA4MiBieSBtZW1iZXJzIG9mIHRoZSBVbml0ZWQgU3RhdGVzIEFybWVkIEZvcmNlcyBhbmQgZ292ZXJubWVudCBzY2llbnRpc3RzLgFUaGUgQnJvdGhlcmhvb2QgQ29tcGVuZGl1bSAiQ29udGludWVkIgBHYWluaW5nIGEgbmV3IGxldmVsIG9mIHBzeWxpbmsgZ3JhbnRzIGtub3dsZWRnZSBvZiBvbmUgcmFuZG9tIHBzeWNoaWMgcG93ZXIuAVJveWFsdHkAWW91IGNhbiBjaGFuZ2UgdGhlIGhlaXIgb2YgYSB0aXRsZSBob2xkZXIgdGhyb3VnaCB0aGUgY29tbXMgY29uc29sZS4gSG93ZXZlciwgdGhpcyByZXF1aXJlcyBjb21wbGV0aW5nIGEgcml0dWFsLgFSb3lhbHR5AFN0b3JlIGJvb2tzIGluIGJvb2tjYXNlcy4gVGhpcyBpbmNyZWFzZXMgdGhlIGJlYXV0eSBvZiBhIHJvb20sIG1ha2VzIG5lYXJieSByZXNlYXJjaCBiZW5jaGVzIGZhc3RlciwgYW5kIGluY3JlYXNlcyB0aGUgWFAgYW5kIHJlY3JlYXRpb24gZ2FpbmVkIGZyb20gcmVhZGluZy4BQ29yZQBTb21lIHRpdGxlIHBlcm1pdHMgYWxsb3cgdGhlIGhvbGRlciB0byBjYWxsIGZvciBtaWxpdGFyeSBhaWQuIFRoaXMgY2FuIHNhdmUgeW91IGluIGEgdG91Z2ggbW9tZW50LgFSb3lhbHR5AE1vc3QgY29sb25pc3RzIGFyZSBleGNpdGVkIHRvIGdvIHRvIHNwYWNlLCBhbmQgZXZlbiBtb3JlIHNvIHdoZW4gb24gRVZBLiBXaW1wcyBhbmQgdW5kZXJncm91bmRlcnMsIGhvd2V2ZXIsIHdpbGwgYmUgdGVycmlmaWVkLgFTYXZlIE91ciBTaGlwIDIAWW91IGNhbiBob2xkIHRoZSBhbHQga2V5IHRvIHNob3cgZGV0YWlsZWQgaW5mb3JtYXRpb24gYWJvdXQgYSBzcGVjaWZpYyB0aWxlLgFDb3JlAEJlaW5nIHNleHVhbGx5IHBlbnQgdXAgbG93ZXJzIGNvbG9uaXN0cycgbW9vZHMgLSBiZSBzdXJlIHRvIGxldCB0aGVtIGJsb3cgb2ZmIHNvbWUgc3RlYW0hAVJpbUpvYldvcmxkAFdvcmsgYW5kIG1vdmVtZW50IHNwZWVkIGFyZSBhZmZlY3RlZCBieSBsaWdodGluZy4gRXZlcnl0aGluZyBpcyBzbG93ZXIgaW4gdGhlIGRhcmsuAUNvcmUAV2hlbiB5b3UgaGF2ZSBtb3JlIHdlYWx0aCwgbW9yZSBwb3dlcmZ1bCBlbmVtaWVzIGF0dGFjay4gSWYgeW91IHdhbnQgdGhlIGNoYWxsZW5nZSB0byBzY2FsZSB3aXRoIHRpbWUgaW5zdGVhZCwgc2VsZWN0ICdXZWFsdGgtaW5kZXBlbmRlbnQgcHJvZ3Jlc3MgbW9kZScgaW4gdGhlIHN0b3J5dGVsbGVyIHNldHRpbmdzLgFDb3JlAFNoaXAgcmFpbGd1bnMgYXJlIGJlc3QgYXQgbG9uZyByYW5nZS4gUGxhc21hIHdlYXBvbnMgY2FuIGJlIHVzZWQgYXQgbWVkaXVtIHJhbmdlIG9yIGNsb3Nlci4gTGFzZXJzIGFyZSBvbmx5IGVmZmVjdGl2ZSB1cCBjbG9zZS4BU2F2ZSBPdXIgU2hpcCAyAERvbid0IGZvcmdldCB0byBwYWNrIG1lZGljaW5lIG9uIHlvdXIgY2FyYXZhbnMuAUNvcmUATmVjcm9waGlsaWEgaXMgZGlzYWJsZWQgYnkgZGVmYXVsdC4gSXQgY2FuIGJlIGVuYWJsZWQgaW4gUmltSm9iV29ybGQgbW9kIHNldHRpbmdzLgFSaW1Kb2JXb3JsZABUbyB0cmF2ZWwgYmV0d2VlbiBwbGFuZXRzLCB5b3UnbGwgbmVlZCBhIEpvaG5zb24tVGFuYWthIGRyaXZlLCBhIHNoaXAgY29tcHV0ZXIgY29yZSwgYW5kIGxvdHMgb2Ygc3RvcmVkIGVuZXJneS4BU2F2ZSBPdXIgU2hpcCAyAENyZWF0dXJlcyB3aXRoIGhpZ2hlciBwc3ljaGljIHNlbnNpdGl2aXR5IGFyZSBhZmZlY3RlZCBtb3JlIGJ5IHBzeWNoaWNzLgFSb3lhbHR5AFdoZW4gZGVzaWduaW5nIGRlZmVuY2VzLCBhc3N1bWUgZW5lbWllcyB3aWxsIGdldCBpbnNpZGUgdXNpbmcgZHJvcCBwb2RzIG9yIHR1bm5lbHMuIEJ1aWxkIGludGVybmFsIGRlZmVuc2l2ZSBwb3NpdGlvbnMuAUNvcmUAUHJpc29uZXJzIHdpbGwgam9pbiBtdWNoIHF1aWNrZXIgYW5kIGF0dGVtcHQgZmV3ZXIgYnJlYWtvdXRzIHdoZW4gdGhleSdyZSBpbiBhIGdvb2QgbW9vZC4BQ29yZQBXYW50IGEgbmV3bHkgY3JhZnRlZCBpdGVtIHRvIGJlIHRha2VuIHRvIGEgc3BlY2lmaWMgc2hlbGY/IE9uY2UgYSBzaGVsZiBpcyBuYW1lZCBvciBsaW5rZWQgd2l0aCBvdGhlciBzaGVsdmVzLCBpdCB3aWxsIGFwcGVhciBhcyBhIGhhdWxpbmcgZGVzdGluYXRpb24gaW4gdGhlIGJpbGzigJlzIOKAnERldGFpbHPigKbigJ0gd2luZG93LgFDb3JlAFNleCBuZWVkIGhhcyBhIGdyZWF0IG1hbnkgY29uZmlndXJhdGlvbiBvcHRpb25zIGluIFJpbUpvYldvcmxkIG1vZCBzZXR0aW5ncy4BUmltSm9iV29ybGQAU2V0IHNjaGVkdWxlcyB3aXRoIGxvbmcgc3RyZXRjaGVzIG9mIG9uZSBhY3Rpdml0eSB0byBtaW5pbWl6ZSB0cmF2ZWwgdGltZS4BQ29yZQBDdW1hem9uZXMgbmVlZCB0byByZWd1bGFybHkgYml0ZSBvZiBjb2Nrcy4gVGhpcyBodW5nZXIgY2FuIGJlIHN0aWxsZWQgYnkgYW5pbWFscyAtIGJ1dCB0aGV5IHdpbGwgbmVlZCBtdWNoIG1vcmUgdGhpcyB3YXkhAVJKVyBHZW5lcwBXaGVuIHlvdXIgc2hpcCBpcyBkZWZlYXRlZCBpbiBjb21iYXQsIGFueSBjcmV3IGluc2lkZSBzcGFjZXIgY3J5cHRvc2xlZXAgY2Fza2V0cyBvciBzcGFjZXIgY3JpYnMgd2lsbCBsYW5kIHNvbWV3aGVyZSBvbiB0aGUgcGxhbmV0IGJlbG93LiBUaGVyZSwgeW91ciBzdG9yeSBjYW4gYmVnaW4gYW5ldy4BU2F2ZSBPdXIgU2hpcCAyAElmIHNvbWVvbmUgaGFzIGEgc2VyaW91cyBpbmZlY3Rpb24gaW4gYSBsaW1iLCB5b3UgY2FuIHJlbW92ZSB0aGUgbGltYiB0byBzYXZlIHRoZWlyIGxpZmUuAUNvcmUAU3BpbmFsLW1vdW50IGNhbm5vbnMgZGVhbCBtb3JlIGRhbWFnZSwgYW5kIHByb2R1Y2UgbGFyZ2VyIGV4cGxvc2lvbnMsIHRoZSBtb3JlIGFtcGxpZmllcnMgdGhleSBjb250YWluLgFTYXZlIE91ciBTaGlwIDIAU2xlZXAgYWNjZWxlcmF0b3JzIGluY3JlYXNlIGNvbG9uaXN0cycgc2xlZXAgcXVhbGl0eSwgYnV0IGFsc28gaW5jcmVhc2UgaHVuZ2VyIHJhdGUuIENvbnNpZGVyIGFzc2lnbmluZyB0aGVtIG1vcmUgZnJlcXVlbnQsIHNob3J0IG5hcHMgdG8gcHJldmVudCBzdGFydmF0aW9uIGR1cmluZyBzbGVlcC4BSWRlb2xvZ3kAQXNzaWduIHlvdXIgaGVyYml2b3JvdXMgYW5pbWFscyB0byBhcmVhcyB3aXRoIGxvdHMgb2YgZ3Jhc3MuIFRoZXknbGwgZWF0IHRoZSBncmFzcyBhbmQgc3BhcmUgeW91IHRoZSBuZWVkIHRvIGZlZWQgdGhlbS4BQ29yZQBUaGUgYXZlcmFnZSBicmEgc2l6ZSBpbiBSaW1Kb2JXb3JsZCBpcyA4NURELiBJZiB5b3UgdGhpbmsgdGhhdCBjYW4ndCBwb3NzaWJseSBiZSByaWdodCBiZWNhdXNlIHlvdXIgd2lmZSBoYXMgRCBjdXBzIGFuZCBzaGUgaXMgcHJldHR5IGJpZyB0aGVuIHNoZSBzaG91bGQgcHJvYmFibHkgYmUgd2VhcmluZyBhIEcgY3VwLgFSaW1Kb2JXb3JsZABCZWZvcmUgZm9ybWluZyBhIGNhcmF2YW4sIGNvbGxlY3QgdGhlIGl0ZW1zIHlvdSB3YW50IHRvIHNlbmQgaW4gYSBzdG9ja3BpbGUgbmVhciB5b3VyIGNhcmF2YW4gaGl0Y2hpbmcgc3BvdC4gVGhpcyB3aWxsIG1ha2UgcGFja2luZyBtdWNoIGZhc3Rlci4BQ29yZQBUZXJyYWluIGFmZmVjdHMgbW92ZW1lbnQgc3BlZWQuIEJ1aWxkIGZsb29ycyB0byBoZWxwIHlvdXIgY29sb25pc3RzIGdldCBhcm91bmQgcXVpY2tlci4BQ29yZQBUaGUgc2tpZXMgb2YgbW9zdCByaW13b3JsZHMgYXJlIGZpbGxlZCB3aXRoIG9yYml0YWwgZGVicmlzLiBTb21lIG1heSBldmVuIGNvbnRhaW4gc3Vydml2b3JzIG9mIHRoZSBzaGlwJ3MgY3Jldywgbm93IGNyYXplZCBhbmQgY2FubmliYWxpc3RpYy4BU2F2ZSBPdXIgU2hpcCAyAE1pY3JvbWFjaGluZXMgY2FuIGJlIHVzZWQgZm9yIG1vcmUgdGhhbiBqdXN0IGN5YmVyaXphdGlvbi4gV2hlbiBwcm9ncmFtbWVkIGNvcnJlY3RseSwgdGhleSBjYW4gYmUgdXNlZCB0byBib29zdCBpbW11bml0eSB0byBmaWdodCBkaXNlYXNlLgFHaVRTIEN5YmVyYnJhaW5zAEVNUCBidXJzdHMgaW5zdGFudGx5IGJyZWFrIHBlcnNvbmFsIHNoaWVsZHMuAUNvcmUAUmltSm9iV29ybGQgaXMgbm90IGNvbXBhdGlibGUgd2l0aCB0aGUgIkxvc3QgRm9yZXN0IiBtb2QuIFRoaXMgaXMgYSBkZWxpYmVyYXRlIGNob2ljZSBvbiB0aGUgcGFydCBvZiB0aGUgYXV0aG9yIG9mIExvc3QgRm9yZXN0IGFuZCBtYWtlcyB1cyB2ZXJ5IHNhZC4BUmltSm9iV29ybGQAWW91IGNhbiBjYXJyeSBhIGRvd25lZCBhbGx5IHdoaWxlIHVzaW5nIHRoZSBqdW1wIHBhY2suIEFlcmlhbCByZXNjdWVzIHNhdmUgbGl2ZXMuAVJveWFsdHkAWW91IGNhbiByZXF1ZXN0IHNwZWNpZmljIHR5cGVzIG9mIHRyYWRlIGNhcmF2YW5zIHVzaW5nIHRoZSBjb21tcyBjb25zb2xlLgFDb3JlAElmIHlvdSBodW50IGJvb21yYXRzIGFuZCBib29tYWxvcGVzIHdoZW4gaXQncyByYWluaW5nLCB0aGVpciBkZWF0aHMgd29uJ3QgY2F1c2UgZm9yZXN0IGZpcmVzLgFDb3JlAE5vIGxlc3NlciBiZWluZyBjYW4gc3RhbmQgYWdhaW5zdCBhbiBhcmNob3RlY2guIE9uY2UgeW91ciBhcmNob3RlY2ggc3BvcmUgY29tcGxldGVzIGl0cyBldm9sdXRpb24sIHRoZSB3b3JsZCB3aWxsIGJlIHlvdXJzLgFTYXZlIE91ciBTaGlwIDIATWFueSBtb2RzIGhhdmUgc2V0dGluZ3MgeW91IGNhbiB0d2VhayB0byBzdWl0IHlvdXIgcGxheSBzdHlsZS4gVGhlIE1vZCBTZXR0aW5ncyBidXR0b24gaXMgZm91bmQgaW4gdGhlIE9wdGlvbnMgbWVudS4BQWxsb3cgVG9vbABDYW5uaWJhbGlzbSBpcyBlbmFibGVkIGJ5IGRlZmF1bHQuIEl0IGNhbid0IGJlIGRpc2FibGVkIGluIFJpbUpvYldvcmxkIG1vZCBzZXR0aW5ncyBiZWNhdXNlIGl0IGlzIGEgZmVhdHVyZSBvZiB0aGUgYmFzZSBnYW1lLgFSaW1Kb2JXb3JsZABDeWJlcml6YXRpb24gcmVxdWlyZXMgdGltZSBmb3IgdGhlIHVzZXIgdG8gYWRhcHQgYWZ0ZXIgdW5kZXJnb2luZyBzdXJnZXJ5LCB1c3VhbGx5IGZvciBvbmx5IGEgZmV3IGRheXMuIFRoaXMgd2lsbCBsZWFkIHRvIGluY3JlYXNlZCBuZWVkIGZvciBzbGVlcCBhbmQgb3RoZXIgc3ltcHRvbXMuAUdpVFMgQ3liZXJicmFpbnMATWFueSBtZW51cyBhbGxvdyB5b3UgdG8gY2xpY2sgYW5kIGRyYWcgYSBzZXR0aW5nIHRvICdwYWludCcgaXQgb3ZlciBtYW55IGVudHJpZXMuIFRoaXMgZXZlbiB3b3JrcyBmb3IgdGhpbmdzIGxpa2Ugb3V0Zml0cyBvciBmb29kIHJlc3RyaWN0aW9ucy4BQ29yZQBSaW1Kb2JXb3JsZCBkb2VzIG5vdCBhZGQgYW55IGxld2QgZ3JhcGhpY3MsIHlvdSB3aWxsIG5lZWQgYW5vdGhlciBtb2QgZm9yIHRoYXQuIEZvciBleGFtcGxlIHJpbW51ZGUgb3Igcmp3X2FuaW1hdGlvbnMuAVJpbUpvYldvcmxkAFN1Y2N1YmkgYW5kIEluY3ViaSBjYW4gc3Bhd24gYXQgYSByYXJlIGV2ZW50IHdoZW4gYSBob3JueSBwYXduIGlzIHNsZWVwaW5nIGFsb25lIGluIHRoZSBuaWdodC4BUkpXIEdlbmVzAExhcmdlciBzaGlwcyByZXF1aXJlIG1vcmUgZW5naW5lcyB0byBtb3ZlIHF1aWNrbHkgaW4gY29tYmF0LiBPZnRlbiBhIHNtYWxsLCBuaW1ibGUgc2hpcCBjYW4gb3V0cnVuIGEgaGVhdmlseS1hcm1lZCBvcHBvbmVudC4BU2F2ZSBPdXIgU2hpcCAyAFNoaWZ0LWNsaWNraW5nIHRoZSBuYW1lIG9mIGEgd29yayB0eXBlIGluIHRoZSBXb3JrIHRhYiBjaGFuZ2VzIHNldHRpbmdzIGZvciBhbGwgY29sb25pc3RzIGF0IG9uY2UuAUNvcmUAU3RyYXcgbWF0dGluZyBpZ25vcmVzIGZpbHRoLiBVc2UgaXQgYXMgdGhlIGZsb29yIGZvciB5b3VyIGJhcm4uAUNvcmUATWVjaGFuaXRvcnMgY2FuIHN1bW1vbiBwb3dlcmZ1bCBtZWNocy4gRmlnaHQgdGhlbSB5b3Vyc2VsZiAtIG9yIGRyYXcgdGhlbSBpbnRvIHlvdXIgZW5lbWllcy4BQmlvdGVjaABFeGVjdXRpb24gYW5pbWF0aW9ucyBjYW5ub3QgYmUgY2FuY2VsbGVkIGFmdGVyIHRoZXkgaGF2ZSBzdGFydGVkLCBidXQgaWYgZWl0aGVyIHBhd24gaXMgZG93bmVkIG9yIGtpbGxlZCwgdGhlIGFuaW1hdGlvbiBpcyBjYW5jZWxsZWQuAU1lbGVlIEFuaW1hdGlvbgBBIHNoaXAgb25seSBuZWVkcyBvbmUgbGlmZSBzdXBwb3J0IHN5c3RlbSwgYnV0IGhhdmluZyBhIGJhY2t1cCBjYW4gc2F2ZSB5b3VyIGNyZXcgaW4gYW4gZW1lcmdlbmN5LgFTYXZlIE91ciBTaGlwIDIAUmVsYXRpdmUgZnJlcXVlbmN5IG9mIG1hbGUgYW5kIGZlbWFsZSBwYXducyBjYW4gYmUgY29udHJvbGxlZCBpbiBSaW1Kb2JXb3JsZCBtb2Qgc2V0dGluZ3MuAVJpbUpvYldvcmxkAEEgc2hpcCBjYW4ndCByYWRpYXRlIGhlYXQgd2hpbGUgaXRzIGNsb2FraW5nIGRldmljZSBpcyBhY3RpdmUuIE1ha2Ugc3VyZSB0byBkaXNhYmxlIGl0IG9uY2UgeW91ciBzaGlwIGJlY29tZXMgZGFuZ2Vyb3VzbHkgaG90LgFTYXZlIE91ciBTaGlwIDIAQWdlcyBhZ28sIGdlbmV0aWMgZW5naW5lZXJzIGNyZWF0ZWQgY29sb25pZXMgb2YgdmFjdXVtLWFkYXB0ZWQgaW5zZWN0cyBpbnRlbmRlZCB0byBtaW5lIGFzdGVyb2lkcy4gVGhpcyB3YXMgbm90IGEgZ29vZCBpZGVhLgFTYXZlIE91ciBTaGlwIDIAV2hvcmluZyBwcmljZSBpcyB2aXNpYmxlIGluIHRoZSAic2hvdyBzZXh1YWxpdHkiIG1lbnUgb24gdGhlIGJpbyB0YWIgKHRoZSBpY29uIGxvb2tzIGxpa2UgYSBoZWFydCkuAVJpbUpvYldvcmxkIC0gQnJvdGhlbCBDb2xvbnkAU29tZSBhbmltYWxzIGNhcnJ5IHJhcmUgZ2VuZXMgLSB5b3UgY2FuIHRyeSB0byBicmVlZCB0aGVtIGFuZCBjcmVhdGUgeW91ciBvd24gc3VwZXItaHlicmlkcyEgKE5vIHdhcnJhbnR5IHByb3ZpZGVkIGZvciBjYXQgZ2lybHMgb3IgZ2VuZXRpYyB3YXN0ZSkBUkpXIEdlbmVzAFJhcGUgd2lsbCBjYXVzZSBhbiBleHRyZW1lIG1vb2QgZGVidWZmLCB0aG91Z2ggYWZ0ZXIgYSB3aGlsZSB0aGV5IG1pZ2h0IHN0YXJ0IHRvIGxpa2UgdGhlIGFidXNlLgFSaW1Kb2JXb3JsZABDYXJlZnVsbHktc2xhdWdodGVyZWQgYW5pbWFscyB5aWVsZCBtb3JlIG1lYXQgYW5kIGxlYXRoZXIgdGhhbiB0aG9zZSB3aG8gd2VyZSBraWxsZWQgdmlvbGVudGx5LgFDb3JlAEFuIHVuYXJtZWQgc2hpcCBpcyBlYXN5IHByZXkuIEluc3RhbGwgd2VhcG9ucyBiZWZvcmUgbGF1bmNoaW5nLCBvciBicmluZyBhIHNodXR0bGUgYW5kIGEgY29tcGV0ZW50IGJvYXJkaW5nIHBhcnR5LgFTYXZlIE91ciBTaGlwIDIASHVtcHNocm9vbXMgYW5kIEFwaHJvZGlzaWFjcyBjYW4gaW1wcm92ZSBhIHBhd24ncyBtb29kLCBidXQgYWxzbyBjYXVzZSBleHRyZW1lIGFyb3VzYWwgYW5kIGNhbiBsZWFkIHRvIG1vcmUgcGVybWFuZW50IGFsdGVyYXRpb25zIGlmIGFidXNlZC4BUmltSm9iV29ybGQAUHJlZGF0b3JzIHdvbid0IGh1bnQgYW5pbWFscyB3aGljaCBhcmUgb24gdGhlIG90aGVyIHNpZGUgb2YgZmVuY2VzIG9yIGJhcnJpY2FkZXMuAUNvcmUAU29tZSBjb2xvbmlzdHMgYXJlIHdvcnNlIHRoYW4gdXNlbGVzcy4gQmFkIGFsbGllcyBhcmUgcGFydCBvZiB0aGUgY2hhbGxlbmdlLgFDb3JlAEZvZ2d5IG9yIHJhaW55IHdlYXRoZXIgcmVkdWNlcyB0aGUgYWNjdXJhY3kgb2YgcmFuZ2VkIHdlYXBvbnMuAUNvcmUAU2xhdmVzIHdvcmsgc2xvd2VyIHRoYW4gbm9ybWFsIGNvbG9uaXN0cyBkdWUgdG8gbGFjayBvZiBtb3RpdmF0aW9uLgFJZGVvbG9neQBFeHBsb3Npb25zIGV4dGluZ3Vpc2ggZmlyZXMgaW4gdGhlaXIgYmxhc3QgcmFkaXVzLiBUaGlzIG1ha2VzIGFydGlsbGVyeSBzaGVsbHMgdXNlZnVsIGZvciBzdG9wcGluZyBmaXJlcyB3aGVuIHRoZXJlIGlzIG5vIG90aGVyIGNob2ljZS4BQ29yZQBTaGlwZWF0ZXIgbWVjaGFuaXRlcyBjYW4gY29uc3VtZSBhbG1vc3QgYW55IHNvbGlkIG1hdGVyaWFsLCBidXQgd2lsbCBiZSBkaXNhYmxlZCBieSBmaXJlZm9hbSBvciB3YXRlci4BU2F2ZSBPdXIgU2hpcCAyAFRoZSBYZW5vdHlwZXMgYWRkZWQgYnkgUkpXX0dlbmVzIHJlcXVpcmUgYSBsb3Qgb2YgaHVtYW4gcmVzb3VyY2VzIC0gaGF2ZSB5b3Vyc2VsZiBhIGJpZyBjb2xvbnkgb3IgbG90cyBvZiBwcmlzb25lcnMgYmVmb3JlIHlvdSBrZWVwIHRoZWlyIGNvbXBhbnkhAVJKVyBHZW5lcwBFbmVteSBmYWN0aW9uIGJhc2VzIGFyZSB2ZXJ5IHdlbGwtZGVmZW5kZWQuIFlvdSBkb24ndCBuZWVkIHRvIGF0dGFjayB0aGVtIC0gYnV0IGJlIHdlbGwtcHJlcGFyZWQgaWYgeW91IGNob29zZSB0byB0cnkuAUNvcmUAQSBzaHV0dGxlIGVxdWlwcGVkIHdpdGggbGFzZXIgb3IgcGxhc21hIHdlYXBvbnJ5IGNhbiBiZSBsYXVuY2hlZCBvbiBzdHJhZmluZyBtaXNzaW9ucyBkdXJpbmcgc2hpcCBjb21iYXQuIEl0IHdpbGwgZmlyZSBvbiB0aGUgZW5lbXkgc2hpcCBidXQgaXMgdnVsbmVyYWJsZSB0byBwb2ludC1kZWZlbnNlLgFTYXZlIE91ciBTaGlwIDIAUHJlc3NpbmcgdGhlICJIb21lIiBrZXkgd2lsbCBhbGxvdyBhbGwgZm9yYmlkZGVuIHRoaW5ncyBvbiB0aGUgbWFwLgFBbGxvdyBUb29sAEJ1aWxkaW5nIHlvdXIgd2hvbGUgY29sb255IGluIG9uZSBzdHJ1Y3R1cmUgc2F2ZXMgcmVzb3VyY2VzLCBidXQgYWxzbyBtYWtlcyBpdCBkaWZmaWN1bHQgdG8gY29udGFpbiBmaXJlcy4BQ29yZQBEaWZmZXJlbnQgdGVycmFpbiBoYXMgZGlmZmVyZW50IGluaGVyZW50IGNsZWFubGluZXNzIGxldmVscy4gVGlsZXMgYXJlIGluaGVyZW50bHkgY2xlYW47IGRpcnQgaXMgaW5oZXJlbnRseSBkaXJ0eS4BQ29yZQBTb21lIGZsb29yIHR5cGVzIGFyZSBmYXN0ZXIgdG8gY2xlYW4gdGhhbiBvdGhlcnMuIEl0IHRha2VzIG11Y2ggbG9uZ2VyIHRvIGNsZWFuIGNhcnBldCBjb21wYXJlZCB0byBtZXRhbCB0aWxlLgFDb3JlAE5vYmxlcyBmcm9tIHRoZSBFbXBpcmUgd2lsbCBkZW1hbmQgYWxsIHRoZSBwcml2aWxlZ2VzIG9mIHRoZWlyIHRpdGxlLiBZb3VyIG93biB0aXRsZWQgY29sb25pc3RzIHdpbGwgYmUgbW9yZSBmbGV4aWJsZSwgdW5sZXNzIHRoZXkgYXJlIGdyZWVkeSBvciBqZWFsb3VzLgFSb3lhbHR5AFNwYWNlciBsZWdlbmRzIHRlbGwgb2YgYXJjaG90ZWNoIHNwb3JlcyAtIHNoaXAgY29tcHV0ZXIgY29yZXMgdGhhdCBoYXZlIGJlZ3VuIHVwZ3JhZGluZyB0aGVtc2VsdmVzIGludG8gYXJjaG90ZWNocy4gVXN1YWxseSB0aGlzIHJlcXVpcmVzIG1lbnRhbCBjb250YWN0IHdpdGggYW4gZXhpc3RpbmcgYXJjaG90ZWNoLi4uAVNhdmUgT3VyIFNoaXAgMgBFdmVuIHNlcmlvdXMgc2V0YmFja3MgZG9uJ3QgbWVhbiB0aGUgZ2FtZSBoYXMgdG8gZW5kLiBUcnkgcGxheWluZyBvdXQgYSBsb3N0IGJhdHRsZSAtIG9mdGVuIHRoZSBiZXN0IHN0b3JpZXMgY29tZSBmcm9tIHRoZSBkYXJrZXN0IHNpdHVhdGlvbnMuAUNvcmUAVGhlICJFcXVhbHMiIGtleSBhY3RpdmF0ZXMgdGhlIGZpcnN0IHRvb2wgcmlnaHQtY2xpY2sgYWN0aW9uIHdoZW4gc29tZXRoaW5nIGlzIHNlbGVjdGVkLgFBbGxvdyBUb29sAERlcGVuZGluZyBvbiBpdHMgdXBncmFkZXMsIGEgc2h1dHRsZSBjYW4gYmUgbGF1bmNoZWQgb24gdmFyaW91cyBtaXNzaW9ucyBkdXJpbmcgc2hpcCBjb21iYXQuIFlvdSBjYW4gcmVjYWxsIGEgc2h1dHRsZSBvciBjaGFuZ2UgaXRzIG1pc3Npb24gZnJvbSBhbnkgc2hpcCBicmlkZ2UuAVNhdmUgT3VyIFNoaXAgMgBQcmVzdGlnZSBhcm1vciBhbmQgZWx0ZXggYXBwYXJlbCB3aWxsIGFsc28gc2F0aXNmeSB0aGUgYXBwYXJlbCByZXF1aXJlbWVudHMgb2Ygcm95YWwgdGl0bGVzLgFSb3lhbHR5AFRoZSBza2lwIGFiZHVjdGlvbiBwc3ljaGljIHJpdHVhbCBwcmlvcml0aXplcyBuZWFyYnkgZW5lbWllcywgbGV0dGluZyB5b3UgYWJkdWN0IHJhaWRlcnMgb24geW91ciBtYXAuAUFub21hbHkAS2VlcGluZyBwcmlzb25lcnMgdG9nZXRoZXIgc2F2ZXMgc3BhY2UuIEhvd2V2ZXIsIHByaXNvbmVycyBrZXB0IHRvZ2V0aGVyIHdpbGwgdHJ5IHRvIGJyZWFrIG91dCB0b2dldGhlci4BQ29yZQBUaGUgQnJvdGhlcmhvb2Qgb2YgU3RlZWwgb2Z0ZW4gbWFpbnRhaW5zIHVuc3RhYmxlIGFuZCBwYXJhbm9pZCByZWxhdGlvbnMgdG93YXJkIG91dHNpZGVycy4gRm9ydHVuYXRlbHksIHRoZXkgbW9zdGx5IHN0YW5kIHJlY2VwdGl2ZSB0byBhY3RzIG9mIGdvb2R3aWxsLgFUaGUgQnJvdGhlcmhvb2QgQ29tcGVuZGl1bSAiQ29udGludWVkIgBQaWVjZXMgb2YgYSBzaGlwIHNlcGFyYXRlZCBmcm9tIGl0cyBicmlkZ2Ugd2lsbCBkZXRhY2ggYW5kIGRyaWZ0IGF3YXkuIFRoZXkgYXJlIHVucmVjb3ZlcmFibGUsIHNvIGZvciBvcHRpbWFsIHNhbHZhZ2luZyB5b3Ugc2hvdWxkIGRpc2FibGUgdGhlIHNoaXAgYnkgdGFyZ2V0aW5nIGl0cyBwaWxvdCBjb25zb2xlIG9yIEFJIGNvcmUuIEJvYXJkaW5nIHBhcnRpZXMgYXJlIGFsc28gYSBnb29kIG9wdGlvbi4BU2F2ZSBPdXIgU2hpcCAyAFlvdSBjYW4gY2hhbmdlIHRvIGEgMTIgaG91ciBjbG9jaywgb3IgY2hhbmdlIENlbHNpdXMgdGVtcGVyYXR1cmVzIHRvIEZhaHJlbmhlaXQsIGluIHRoZSBvcHRpb25zIG1lbnUuAUNvcmUASW5jdWJpICd0YXAnIHBhd25zIHRoZXkgaGF2ZSBzZXggd2l0aCB0byBnYWluIGZlcnRpbGluLiBJbmN1YmkgY2Fubm90IGdhaW4gZnVydGhlciBGZXJ0aWxpbiB0aGlzIHdheSB1bnRpbCB0aGUgcGF3biBpcyBmdWxseSByZWNvdmVyZWQuAVJKVyBHZW5lcwBFbmVtaWVzIGFyZSBsZXNzIGxpa2VseSB0byBhdHRhY2sgY2hpbGRyZW4gd2hlbiB0aGV5IGFyZSB1bmFybWVkLiBLZWVwIGtpZHMgc2FmZXIgYnkgbm90IGdpdmluZyB0aGVtIHdlYXBvbnMuAUJpb3RlY2gAUmlnaHQtY2xpY2sgYW5kIGRyYWcgdG8gaGF2ZSB5b3VyIGRyYWZ0ZWQgZmlnaHRlcnMgZm9ybSBhIGxpbmUuIEJ1bmNoZWQtdXAgdGFyZ2V0cyBhcmUgZWFzeSB0byBoaXQhAUNvcmUAU29tZSBtZWNoIGNsdXN0ZXJzIHJlbWFpbiBkb3JtYW50IHVudGlsIGRpc3R1cmJlZC4gVXNlIHRoYXQgdGltZSB0byBwcmVwYXJlIHlvdXIgYXR0YWNrLgFSb3lhbHR5AFJpbUpvYldvcmxkIGlzIGEgY29tbXVuaXR5IHByb2plY3Qgd2l0aCBvdmVyIDIwIGNvbnRyaWJ1dG9ycy4BUmltSm9iV29ybGQAVGhlICJTdWJtaXQiIGJ1dHRvbiBpcyBvbmUgb2YgdGhlIG1vc3QgcG93ZXJmdWwgZmVhdHVyZXMgYWRkZWQgYnkgYW55IG1vZC4BUmltSm9iV29ybGQAVGhlIGNsb2FraW5nIGRldmljZSBwcmV2ZW50cyBlbmVteSBzaGlwcyBmcm9tIG5vdGljaW5nIHlvdS4gSXQgaXMgdXNlbGVzcyBvbmNlIGNvbWJhdCBoYXMgYWxyZWFkeSBiZWd1biwgaG93ZXZlci4BU2F2ZSBPdXIgU2hpcCAyAEFyZSB5b3VyIGNvbG9uaXN0cyBib3JlZD8gTGV0IHRoZW0gaGF2ZSBhIHR1c3NsZSB1bmRlciB0aGUgc2hlZXRzLCB0aGF0J2xsIGNoZWVyIHRoZW0gdXAuAVJpbUpvYldvcmxkAE9uY2UgdGhlIGFwcHJvcHJpYXRlIHJlc2VhcmNoIGhhcyBiZWVuIGNvbXBsZXRlZCwgYW4gYXJjaG90ZWNoIHNwb3JlIGNhbiBnZW5lcmF0ZSBhIHdpZGUgcmFuZ2Ugb2YgcHN5Y2hpYyBwaGVub21lbmEgdXBvbiByZXF1ZXN0LgFTYXZlIE91ciBTaGlwIDIAU29tZXRpbWVzIGEgdGhyZWF0IG1pZ2h0IGJlIGFibGUgdG8gYmUgc3ViZHVlZCB0aHJvdWdoIHNleCBhbmQgc3VibWlzc2lvbiBpZiB5b3UgbGFjayB0aGUgZmlyZXBvd2VyIHRvIGRlYWwgd2l0aCBpdC4BUmltSm9iV29ybGQAVGhlIGFyY2hvY2F0IHdhcyBkZXNpZ25lZCBpbiB0aGUgaW1hZ2Ugb2YgIkVjbGVjdGljIiBhbmQgIkhpdG9taSIgLSB0d28gZWFybHkgMjFzdC1jZW50dXJ5IGhvdXNlcGV0cyB1bml2ZXJzYWxseSByZWdhcmRlZCBhcyBoaXN0b3J5J3MgbW9zdCBsb3ZhYmxlIGNhdHMuAVNhdmUgT3VyIFNoaXAgMgBSaW1Kb2JXb3JsZCBpcyBvcGVuIHNvdXJjZSBhbmQgYWNjZXB0cyBzdWJtaXNzaW9ucyBmcm9tIGFueW9uZS4BUmltSm9iV29ybGQASW4gb3JkZXIgdG8gcXVpY2tseSBldm9sdmUgaW50byBhIGZ1bGwgYXJjaG90ZWNoLCBhbiBhcmNob3RlY2ggc3BvcmUgY2FuIHJldmVyc2UtZW5naW5lZXIgYXJ0aWZhY3RzIGtub3duIGFzIFBpbGxhcnMuIEZvdXIgYXJlIGtub3duIHRvIGV4aXN0IG9uIHRoZSBSaW0sIGFsbCB3ZWxsLWd1YXJkZWQuAVNhdmUgT3VyIFNoaXAgMgBUaGUgbW9yZSBwb2xsdXRlZCBuZWFyYnkgd29ybGQgdGlsZXMgYXJlLCB0aGUgbW9yZSBvZnRlbiB5b3UnbGwgZ2V0IGFjaWRpYyBzbW9nLgFCaW90ZWNoAENvbmRvbXMgY2FuIGJlIGF1dG9tYXRpY2FsbHkgdXNlZCBpZiBwbGFjZWQgaW4gYSBzdG9ja3BpbGUgbmV4dCB0byBhIGJlZCAtIGl0IG1pZ2h0IGJlIGEgZ29vZCBpZGVhIHRvIGhhdmUgc29tZSBhcm91bmQgaWYgeW91IGludGVuZCBvbiB3aG9yaW5nIHlvdXIgY29sb25pc3RzIG91dC4BUmltSm9iV29ybGQgLSBCcm90aGVsIENvbG9ueQBDbGVhbiBsYWJzIHdpdGggc3RlcmlsZSB0aWxlIGdpdmUgcmVzZWFyY2ggc3BlZWQgYm9udXNlcy4BQ29yZQBUaGUgbW9yZSBjb21iYXQtY2FwYWJsZSB5b3VyIHNoaXAgaXMsIHRoZSBtb3JlIGxpa2VseSB5b3UgYXJlIHRvIGJlIGNoYWxsZW5nZWQgYnkgZm9ybWlkYWJsZSBlbmVtaWVzLgFTYXZlIE91ciBTaGlwIDIAQ2FyYXZhbnMgbW92ZSBmYXN0ZXIgaWYgdGhleSBpbmNsdWRlIHJpZGVhYmxlIGFuaW1hbHMgbGlrZSBob3JzZXMsIGRvbmtleXMgYW5kIGRyb21lZGFyaWVzLgFDb3JlACJUaGUgb25seSBzYWx2YXRpb24gdGhpcyB0b3J0dXJlZCBwbGFuZXQgYW5kIGl0cyBwZW9wbGUgaGF2ZS4gV2l0aG91dCB1cywgaHVtYW5pdHkgaXMgc3VyZSB0byBwZXJpc2guIiAtIEJyb3RoZXJob29kIFNjcmliZSBWcmVlAVRoZSBCcm90aGVyaG9vZCBDb21wZW5kaXVtICJDb250aW51ZWQiAEEgc2h1dHRsZSBlcXVpcHBlZCB3aXRoIGxhc2VycyBjYW4gYmUgbGF1bmNoZWQgb24gaW50ZXJjZXB0aW9uIG1pc3Npb25zIGR1cmluZyBzaGlwIGNvbWJhdC4gSXQgd2lsbCBhdHRlbXB0IHRvIGRlc3Ryb3kgaW5jb21pbmcgdG9ycGVkb2VzIGFuZCBkb2dmaWdodCBlbmVteSBzaHV0dGxlY3JhZnQuAVNhdmUgT3VyIFNoaXAgMgBZb3UgY2FuIGhhdmUgbXVsdGlwbGUgcmVzZWFyY2hlcnMgd29ya2luZyBzaW11bHRhbmVvdXNseSBhdCBtdWx0aXBsZSByZXNlYXJjaCB0YWJsZXMuAUNvcmUAT2NjYXNpb25hbGx5IHlvdSB3aWxsIGVuY291bnRlciB0cmFkZSBzaGlwcyBpbiBvcmJpdC4gWW91IGNhbiBhdHRlbXB0IHRvIHBpcmF0ZSB0aGVtLCBidXQgZXhwZWN0IGJvdW50eSBodW50ZXJzIHRvIHB1cnN1ZSB5b3UgYXMgeW91ciBub3RvcmlldHkgcmlzZXMuAVNhdmUgT3VyIFNoaXAgMgBJdOKAmXMgbmV2ZXIgZ2FtZSBvdmVyLiBJZiBldmVyeW9uZSBpcyBkZWFkIG9yIGdvbmUsIHlvdSBjYW4gY3JlYXRlIG5ldyB3YW5kZXJlcnMgdG8gdGFrZSBvdmVyIHRoZSByZW1haW5zIG9mIHlvdXIgY29sb255LgFDb3JlAElmIGFuIGVuZW15IHNoaXAncyBlbmdpbmVzIGFyZSBpbnRhY3QsIHNodXR0bGVzIHdpbGwgdGFrZSBsb25nZXIgdG8gcmVhY2ggaXQuIFRoaXMgd2lsbCB0aGVtIGV4cG9zZSB0aGVtIHRvIG1vcmUgZmlyZSBmcm9tIHBvaW50LWRlZmVuc2Ugd2VhcG9ucy4BU2F2ZSBPdXIgU2hpcCAyAEJ5IGRlZmF1bHQsIGEgc2h1dHRsZWNyYWZ0IGhhcyBvbmUgc2VhdCBmb3IgaXRzIHBpbG90LiBZb3VyIGNvbG9uaXN0cyBjYW4gYWRkIHBhc3NlbmdlciBjYXBhY2l0eSwgd2VhcG9ucywgc2hpZWxkcywgYW5kIG90aGVyIHVwZ3JhZGVzIC0gYXQgc29tZSBjb3N0IGluIGNhcmdvIHNwYWNlLgFTYXZlIE91ciBTaGlwIDIAQ3liZXJicmFpbiBTY2xlcm9zaXMgaXMgYW4gZXh0cmVtZWx5IHJhcmUgY3liZXJicmFpbiBkaXNlYXNlIHdoZXJlIGJyYWluIHRpc3N1ZSBoYXJkZW5zIG92ZXIgdGltZS4gVGhpcyBsZWFkcyB0byBtZW1vcnkgbG9zcywgaXNzdWVzIHRhbGtpbmcsIGFuZCBldmVudHVhbGx5LSBicmFpbiBkZWF0aC4BR2lUUyBDeWJlcmJyYWlucwBJZiB5b3UgbGlrZSB0d2VudHktYnJlYXN0ZWQgdGl0dHlzbmFrZXMgdGhlbiB0cnkgdGhlIE5lcGhpbGEgc3VibW9kLgFSaW1Kb2JXb3JsZABFbnRpcmUgaGVyZHMgb2YgYW5pbWFscyBtYXkgYXR0YWNrIHlvdSB3aGVuIHlvdSB0cnkgdG8gaHVudCB0aGVtLiBBY2NlcHQgdGhlIHJpc2sgYmVmb3JlIGh1bnRpbmcsIG9yIGNob29zZSB3ZWFrZXIgcHJleS4BQ29yZQBSaWdodC1jbGlja2luZyBhIG51bWJlciBpbiB0aGUgV29yayB0YWIgdXNpbmcgbWFudWFsIHByaW9yaXRpZXMgd2lsbCByZWR1Y2UgdGhlIHByaW9yaXR5IGluc3RlYWQgb2YgaW5jcmVhc2luZyBpdC4BQ29yZQBJZiB5b3UgaGF2ZSB1bnRyYWluZWQgYW5pbWFscyBpbiB5b3VyIGNhcmF2YW4sIHlvdSBjYW4gc3BsaXQgdGhlbSBpbnRvIGEgc2VwYXJhdGUgY2FyYXZhbiBiZWZvcmUgYXR0YWNraW5nIGFuIGVuZW15LCB0byBrZWVwIHRoZW0gb3V0IG9mIHRoZSBmaWdodC4BQ29yZQBTZXh1YWwgcHJlZmVyZW5jZSBpcyB2aXNpYmxlIGluIHRoZSAic2hvdyBzZXh1YWxpdHkiIG1lbnUgb24gdGhlIGJpbyB0YWIgKHRoZSBpY29uIGxvb2tzIGxpa2UgYSBoZWFydCkuAVJpbUpvYldvcmxkAEN5YmVyaXphdGlvbiBvZiB0aGUgYnJhaW4gcHJvdmlkZXMgbnVtZXJvdXMgYmVuZWZpdHMsIGJ1dCBjYW4gYWxzbyBoYXZlIGRyYXdiYWNrcyBkZXBlbmRpbmcgb24gaG93IG11Y2ggb2YgdGhlIGJyYWluIGlzIGN5YmVyaXplZC4BR2lUUyBDeWJlcmJyYWlucwBBIHNodXR0bGUgZXF1aXBwZWQgd2l0aCB0b3JwZWRvIHR1YmVzIGNhbiBiZSBsYXVuY2hlZCBvbiBib21iaW5nIG1pc3Npb25zIGR1cmluZyBzaGlwIGNvbWJhdC4gVGhlIHNodXR0bGUgaXRzZWxmIHdpbGwgYmUgdnVsbmVyYWJsZSB0byBwb2ludC1kZWZlbnNlLCBidXQgaXRzIHRvcnBlZG9lcyB3aWxsIG5vdCBiZS4BU2F2ZSBPdXIgU2hpcCAyAEEgd2VsbC1wbGFjZWQgdG9ycGVkbyBjYW4gb3ZlcmxvYWQgc2hpZWxkcyBhbmQgc2hhdHRlciBodWxsLCBhc3N1bWluZyBpdCBpc24ndCBpbnRlcmNlcHRlZCBieSBwb2ludC1kZWZlbnNlIHdlYXBvbnJ5LgFTYXZlIE91ciBTaGlwIDIARHVyaW5nIGVuY291bnRlcnMgYXdheSBmcm9tIGhvbWUsIHlvdSBjYW4gcGxhY2UgYSBjYXJhdmFuIGhpdGNoaW5nIHNwb3QgdG8ga2VlcCB5b3VyIGFuaW1hbHMgZnJvbSB3YW5kZXJpbmcuAUNvcmUAT25jZSBpbiBvcmJpdCwgYWR2YW5jZWQgc2Vuc29ycyB3aWxsIGF1dG9tYXRpY2FsbHkgc2NhbiBmb3Igb3JiaXRhbCBxdWVzdCBzaXRlcy4gTXVsdGlwbGUgY29yZXMgY2FuIHNwZWVkIHRoaXMgcHJvY2VzcyBhbG9uZy4BU2F2ZSBPdXIgU2hpcCAyAENsb3NlZCBTaGVsbCBTeW5kcm9tZSBpcyBhIHZlcnkgcmFyZSBjeWJlcmJyYWluIGRpc2Vhc2Ugd2hlcmUgYSB1c2VyIHNodXRzIHRoZW1zZWxmIG9mZiBmcm9tIHRoZSB3b3JsZCwgYnV0IG1heSBiZWNvbWUgYSBzYXZhbnQgaW4gb3RoZXIgYXJlYXMuAUdpVFMgQ3liZXJicmFpbnMAQSBjb2xvbmlzdCBjYW4gdXNlIHRoZSBJbnRlbGxlY3R1YWwgc2tpbGwgdG8gaGFjayBhbiBlbmVteSBzaGlwJ3MgYnJpZGdlLCBwbGFjaW5nIGl0IHVuZGVyIHlvdXIgY29udHJvbC4gU29tZSBjYXB0YWlucyB3ZWxkIG11bHRpcGxlIGNhcHR1cmVkIHNoaXBzIHRvZ2V0aGVyLgFTYXZlIE91ciBTaGlwIDIASWYgeW91IGNob29zZSB0byBwbGF5IGZvciB0aGUgRW5jbGF2ZSwgZXhwZWN0IHN0cm9uZyBvcHBvc2l0aW9uIGZyb20gb3RoZXIgZmFjdGlvbnMsIGFuZCB2ZXJ5IGZldyBhbGxpZXMuAVRoZSBCcm90aGVyaG9vZCBDb21wZW5kaXVtICJDb250aW51ZWQiAElmIGEgdGl0bGUgaG9sZGVyIGRpZXMsIHRoZWlyIHRpdGxlIGdvZXMgdG8gdGhlaXIgY2hvc2VuIGhlaXIuAVJveWFsdHkAVGhlIGdlbmUgJ2N1bWVhdGVyJyBhbGxvd3MgeW91IHRvIGRyYWluIGN1bWZsYXRpb24gYnkgY3VubmlsaW5ndXMuIC4uLiBDb29sLCBodWg/AVJKVyBHZW5lcwBTbWFsbGVyIGNhcmF2YW5zIGdldCBhdHRhY2tlZCBsZXNzIG9mdGVuIGJlY2F1c2UgdGhleSdyZSBsZXNzIHZpc2libGUuAUNvcmUASWYgeW91IG5lZWQgaGVscCBpbiBhIGZpZ2h0LCBjYWxsIHlvdXIgYWxsaWVzIHVzaW5nIHRoZSBjb21tcyBjb25zb2xlLgFDb3JlAFRoZSAiU2VsZWN0IHNpbWlsYXIiIHRvb2wgaGFzIG1hbnkgdXNlcy4gSXQgY2FuIGhlbHAgZmluZCBvcmUgZGVwb3NpdHMsIGhhcnZlc3Qgd2lsZCBoZWFscm9vdCBhbmQgZGVjb25zdHJ1Y3QgY2FibGVzIHVuZGVyIHdhbGxzLgFBbGxvdyBUb29sAFByZXNzaW5nIHRoZSAiRXF1YWxzIiBrZXkgYWZ0ZXIgc2VsZWN0aW5nIGEgbWluZWFibGUgcmVzb3VyY2Ugd2lsbCBkZXNpZ25hdGUgdGhlIHdob2xlIGNsdXN0ZXIgZm9yIG1pbmluZy4BQWxsb3cgVG9vbABDb21tYW5kIGJ1dHRvbnMgd2l0aCBhIHNtYWxsIG1vdXNlIGljb24gY2FuIGJlIHJpZ2h0LWNsaWNrZWQgZm9yIGFkZGl0aW9uYWwgc3BlY2lhbCBjb21tYW5kcy4BQWxsb3cgVG9vbABJZiB5b3UgdXNlIFJKVyB3aXRoIGFueSBhbGllbiByYWNlIG1vZHMgbWFrZSBzdXJlIHlvdSBhbHNvIGluc3RhbGwgIlJKVyBSYWNlIFN1cHBvcnQiLiBPdGhlcndpc2UgeW91ciBFd29rIHdvbid0IGhhdmUgYSByYWNjb29uIHBlbmlzLgFSaW1Kb2JXb3JsZABDb25kb21zIGNhbiBiZSBhdXRvbWF0aWNhbGx5IHVzZWQgaWYgcGxhY2VkIGluIGEgc3RvY2twaWxlIG5leHQgdG8gYSBiZWQgLSBpdCBtaWdodCBiZSBhIGdvb2QgaWRlYSB0byBoYXZlIHNvbWUgYXJvdW5kIGlmIHlvdSB3YW50IHRvIGF2b2lkIHVud2FudGVkIHByZWduYW5jaWVzLgFSaW1Kb2JXb3JsZABTdWNjdWJpIHJlY2VpdmUgdGhlaXIgZmVydGlsaW4gZnJvbSBjdW0uIE1ha2Ugc3VyZSB0byBoYXZlIGVub3VnaCBqdWljZSBhcm91bmQgdG8ga2VlcCB0aGVtIGhhcHB5LgFSSlcgR2VuZXMATGlnaHQgcmVjb24gYXJtb3JzIGFsbG93cyBjb2xvbmlzdHMgdG8gbWl0aWdhdGUgdGhlIG1vdmVtZW50IHBlbmFsdHkgaW5kdWNlZCBieSBULXNlcmllIGFybW9ycy4BVGhlIEJyb3RoZXJob29kIENvbXBlbmRpdW0gIkNvbnRpbnVlZCIAVXNlZnVsIHJlc291cmNlcyBhcmUgc3VycHJpc2luZ2x5IGFidW5kYW50IGluIHNwYWNlLiBZb3UgbWlnaHQgd2FudCB0byBsYXVuY2ggYSBzbWFsbCBzaGlwIGF0IGZpcnN0LCB0aGVuIGdyYWR1YWxseSBleHBhbmQgaXQuAVNhdmUgT3VyIFNoaXAgMgBQc3lsaW5rIG5ldXJvZm9ybWVycyBjYW4gYmUgYWNxdWlyZWQgdGhyb3VnaCBxdWVzdHMuIFRoZXNlIGl0ZW1zIGNhbiBnaXZlIGEgcGVyc29uIHBzeWNoaWMgcG93ZXJzLgFSb3lhbHR5AFlvdSBjYW4gZ2l2ZSBwcmlzb25lcnMgYXMgZ2lmdHMuIEdpdmluZyBhIHByaXNvbmVyIGJhY2sgdG8gdGhlaXIgb3duIGZhY3Rpb24gd2lsbCBiZSBoaWdobHkgYXBwcmVjaWF0ZWQuAUNvcmUAQXN0ZXJvaWRzIGFyZSBhIGdyZWF0IHNvdXJjZSBvZiBidWlsZGluZyBtYXRlcmlhbHMgaW4gc3BhY2UsIGJ1dCBiZXdhcmUgb2Ygd2hhdCBtYXkgbHVyayBpbnNpZGUuLi4BU2F2ZSBPdXIgU2hpcCAyAFNvbWUgYW5pbWFscyBwcm9kdWNlIGEgbG90IG9mIGZpbHRoLiBLZWVwIHlvdXIgZWxlcGhhbnRzIGFuZCBjYXR0bGUgb3V0c2lkZS4BQ29yZQAiQW5vdGhlciBnbG9yaW91cyBkYXkgaW4gdGhpcyBtYW4ncyBhcm15ICEiAVRoZSBCcm90aGVyaG9vZCBDb21wZW5kaXVtICJDb250aW51ZWQiAEZsb29ycyBjYW4gYmUgYnVpbHQgYXRvcCBzaGlwIGh1bGwgdGlsZS4gWW91ciBnb2xkLXBhbmVsZWQgYnJpZGdlIHdpbGwgYmUgdGhlIGVudnkgb2YgZXZlcnkgbGVzc2VyIGNhcHRhaW4uAVNhdmUgT3VyIFNoaXAgMgBKb2huc29uLVRhbmFrYSBkcml2ZXMgYXJlIHR5cGljYWxseSBvbmx5IGZvdW5kIG9uIHRoZSBsYXJnZXN0IHNoaXBzLCBzdWNoIGFzIGludGVyc3RlbGxhciBwYXNzZW5nZXIgbGluZXJzLgFTYXZlIE91ciBTaGlwIDIATGFzc28gY29vbGRvd24gaXMgYWZmZWN0ZWQgYnkgdGhlIHR5cGUgb2YgbGFzc28sIHRoZSBwYXduJ3MgbWVsZWUgc2tpbGwsIGFuZCB0aGUgcGF3bidzIG1hbmlwdWxhdGlvbi4BTWVsZWUgQW5pbWF0aW9uAFNodXR0bGVjcmFmdCBjb21lIGluIGZvdXIgc2l6ZXMuIE9ubHkgdGhlIHNtYWxsZXN0IGFtb25nIHRoZW0gaXMgcG93ZXJlZCBieSBjaGVtZnVlbDsgbGFyZ2VyIGNhcmdvIHNodXR0bGVzIHJlcXVpcmUgbnVjbGVhciBmdWVsLgFTYXZlIE91ciBTaGlwIDIAS2VlcCB3ZWFwb24gc3RvY2twaWxlcyBhd2F5IGZyb20geW91ciBwcmlzb25zLiBQcmlzb24gYnJlYWtzIGFyZSBtdWNoIG1vcmUgZGFuZ2Vyb3VzIHdpdGggZ3VucyBhbmQgZXhwbG9zaXZlcy4BQ29yZQBBIG1vZGVybiByZXBsYWNlbWVudCBmb3IgYW50aXF1YXRlZCBob2xvZ3JhbSB0ZWNobm9sb2d5LCBmb3JtZ2VscyBhcmUgc3dhcm1zIG9mIG1lY2hhbml0ZXMgd2hpY2ggbWltaWMgYmlvbG9naWNhbCBodW1hbiBib2RpZXMuAVNhdmUgT3VyIFNoaXAgMgBTb21lIHR5cGVzIG9mIHNleCAoc3VjaCBhcyBzZXggd2l0aCBhbmltYWxzKSBoYXZlIGEgY2hhbmNlIG9mIGxlYXZpbmcgYSBwZXJtYW5lbnQgbWFyayBvbiBhIHBhd24ncyBwc3ljaGUuAVJpbUpvYldvcmxkAEN1dGUgdGFtZSBhbmltYWxzIHdpbGwgbnV6emxlIHlvdXIgY29sb25pc3RzLCBpbXByb3ZpbmcgdGhlaXIgbW9vZC4BQ29yZQBEdXJpbmcgdGhlIGFkYXB0aW9uIHBoYXNlLCB0aGVyZSBpcyBhIGxvdyBjaGFuY2UgYSBjeWJlcmJyYWluIHVzZXIgbWlnaHQgY29udHJhY3QgYSBjeWJlcmJyYWluIGRpc2Vhc2UuAUdpVFMgQ3liZXJicmFpbnMAVGVycm9yLWluZHVjaW5nIGJ1aWxkaW5ncyBhZmZlY3QgYW55b25lIHdpdGhpbiBhIDUtY2VsbCByYWRpdXMuAUlkZW9sb2d5AEhhdmUgYW4gdW53YXZlcmluZ2x5IGxveWFsIHByaXNvbmVyPyBUaGUgYnJhaW53aXBlIHBzeWNoaWMgcml0dWFsIHdpbGwgbWFrZSB0aGVtIHJlY3J1aXRhYmxlLgFBbm9tYWx5AEV4dHJlbWUgY3liZXJpemF0aW9uIG9mIHRoZSBicmFpbiBpcyBhIHJhcmUgYW5kIGV4cGVuc2l2ZSBwcm9jZWR1cmUgdGhhdCBjYW4gbGVhZCB0byB0aGUgdXNlciBvYnRhaW5pbmcgcG93ZXJmdWwgYWJpbGl0aWVzLCBidXQgYWxzbyB3aXRoIGdyZWF0IGNvc3QgdG8gdGhlaXIgbWVudGFsIHN0YXRlLgFHaVRTIEN5YmVyYnJhaW5zAFB1dCBjaGFpcnMgaW4gZnJvbnQgb2Ygd29ya2JlbmNoZXMgc28gd29ya2VycyBjYW4gc2l0IGNvbWZvcnRhYmx5IHdoaWxlIHdvcmtpbmcuAUNvcmUAWW91IGNhbiBpbXByb3ZlIGFuIGFyY2hvdGVjaCBzcG9yZSdzIG1vb2QgYnkgaGF2aW5nIGNvbG9uaXN0cyBtZWRpdGF0ZSBuZWFyYnksIG9yIGJ5IGdpdmluZyBpdCB0aGUgYnJhaW4gb2YgYSBwcmlzb25lciB0byBleGFtaW5lLiBUaGlzIGtpbGxzIHRoZSBwcmlzb25lci4BU2F2ZSBPdXIgU2hpcCAyAFJhcGUgaXMgZGlzYWJsZWQgYnkgZGVmYXVsdC4gSXQgY2FuIGJlIGVuYWJsZWQgaW4gUmltSm9iV29ybGQgbW9kIHNldHRpbmdzLgFSaW1Kb2JXb3JsZABEcm9wcGluZyBhIHN0b25lIG9yIHNsYWcgY2h1bmsgaW4gYSBkb29yd2F5IHdpbGwgZm9yY2UgaXQgb3BlbiwgbGVhdmluZyB5b3UgdnVsbmVyYWJsZSB0byBob3N0aWxlIHdpbGRsaWZlIGFuZCByYWlkZXJzLgFDb3JlAFNtb2tlIHRvdGFsbHkgcHJldmVudHMgdHVycmV0cyBmcm9tIGRldGVjdGluZyB0YXJnZXRzLCBidXQgcGVvcGxlIGNhbiBzdGlsbCBzaG9vdCB3aXRoIHJlZHVjZWQgYWNjdXJhY3kuAUNvcmUAV2hlbiB0YW1pbmcgYW5pbWFscywgbWFrZSBzdXJlIHlvdSBoYXZlIGVub3VnaCBmb29kIG9mIHRoZSBjb3JyZWN0IHR5cGUgdG8gZmVlZCB0aGVtLgFDb3JlAFdoZW4gc29tZXRoaW5nIGlzIHNlbGVjdGVkLCB5b3UgY2FuIHBpY2sgdXAgdGhlIGFwcHJvcHJpYXRlIHRvb2wgYnkgaG9sZGluZyBTaGlmdCBhbmQgY2xpY2tpbmcgb25lIG9mIHRoZSBjb21tYW5kIGJ1dHRvbnMuAUFsbG93IFRvb2wASW4gaXRzIGZyYW50aWMgcmFjZSBmb3IgbG9zdCBrbm93bGVkZ2UsIGl0IGlzIHZlcnkgbGlrZWx5IHRoYXQgdGhlIEJyb3RoZXJob29kIG9mIFN0ZWVsIGV2ZW50dWFsbHkgcmVhY2hlZCB0aGUgcHJlcmVxdWlzaXRlcyBmb3IgaW50ZXJzdGVsbGFyIGpvdXJuZXlzLgFUaGUgQnJvdGhlcmhvb2QgQ29tcGVuZGl1bSAiQ29udGludWVkIgBXaGVuIGZpZ2h0aW5nIGEgbWVjaCBjbHVzdGVyLCB0cnkgc2hvb3RpbmcgdGhlaXIgcG93ZXIgY2VsbHMuIFRoZXkgZXhwbG9kZSwgZGVhbGluZyBoZWF2eSBkYW1hZ2UgdG8gc3Vycm91bmRpbmcgY3JlYXR1cmVzIGFuZCBzdHJ1Y3R1cmVzLgFSb3lhbHR5AEVNUCBidXJzdHMgd2lsbCB0ZW1wb3JhcmlseSBkaXNhYmxlIHR1cnJldHMgYW5kIHNoaWVsZHMuAUNvcmUAU3VjY3ViaSBkcmFpbiBGZXJ0aWxpbiB0aHJvdWdoIHNleC4gVGhlIGRyYWluZWQgcGF3biB3aWxsIGdpdmUgbGVzcyBGZXJ0aWxpbiBpbiBjb25zZXF1ZW50IGFjdHMgdW50aWwgdGhleSBhcmUgcmVjb3ZlcmVkLgFSSlcgR2VuZXMASWYgeW91IGNhbid0IGRlZmVuZCBhZ2FpbnN0IGEgdGhyZWF0LCBtYWtlIGEgY2FyYXZhbiBhbmQgcnVuLiBZb3UgbWF5IGxvc2UgeW91ciBob21lLCBidXQgeW91ciBzdG9yeSBjYW4gY29udGludWUuAUNvcmUATG9zaW5nIHNlY3VyZWQgZGF0YWtleXMgY2FuIGJlIGNvbnNpZGVyZWQgYW4gYWN0IG9mIHRyZWFzb24gYW5kIHB1bmlzaGFibGUgYnkgZGVhdGguIFRoaXMgaXMgd2h5IHRoZSBtYWpvcml0eSBvZiBFbmNsYXZlIG9mZmljZXJzIGNhcnJ5IHRoZW0sIHJhdGhlciB0aGFuIHRha2luZyB0aGlzIHJpc2suAVRoZSBCcm90aGVyaG9vZCBDb21wZW5kaXVtICJDb250aW51ZWQiAEVhY2ggc2FsdmFnZSBiYXkgY2FuIG1vdmUgdXAgdG8gNTAwMCB1bml0cyBvZiBzaGlwIHdlaWdodC4gQnVpbGQgbXVsdGlwbGUgYmF5cyB0byBlZmZpY2llbnRseSBtb3ZlIGxhcmdlciB3cmVja3MuAVNhdmUgT3VyIFNoaXAgMgBZb3UgY2FuIHVzZSB0cmFuc3BvcnQgcG9kcyB0byBzZW5kIGdpZnRzIGRpcmVjdGx5IHRvIG90aGVyIGZhY3Rpb25zJyBiYXNlcyAtIGV2ZW4geW91ciBlbmVtaWVzLiBUaGlzIGltcHJvdmVzIGZhY3Rpb24gcmVsYXRpb25zLgFDb3JlAE9yZ2FuIGRlY2F5IGNhbiBiZSBjdXJlZCB0aHJvdWdoIHRoZSB1c2Ugb2YgbWVkaWNhbCBtaWNyb21hY2hpbmVzLiBUaGUgc3VyZ2VyeSBpcyByaXNreSwgYnV0IGl0IG1pZ2h0IGJlIHlvdXIgb25seSBvcHRpb24uAUdpVFMgQ3liZXJicmFpbnMAUXVpcmtzIGFyZSB2aXNpYmxlIGluIHRoZSAic2hvdyBzZXh1YWxpdHkiIG1lbnUgb24gdGhlIGJpbyB0YWIgKHRoZSBpY29uIGxvb2tzIGxpa2UgYSBoZWFydCkuAVJpbUpvYldvcmxkAFR1cnJldHMgZXhwbG9kZSB3aGVuIHRoZXkgdGFrZSBhIGxvdCBvZiBkYW1hZ2UuIERvbid0IHB1dCB0aGVtIHRvbyBjbG9zZSB0b2dldGhlciwgYW5kIGRvbid0IHB1dCB5b3VyIHBlb3BsZSB0b28gY2xvc2UgdG8gdGhlbS4BQ29yZQBDcml0dGVyc2xlZXAgY2Fza2V0cyBjYW4gc3RvcmUgbWFueSBzbWFsbCBhbmltYWxzLCBzdWNoIGFzIGNhdHMgb3IgcHVwcGllcy4gWW91IHdpbGwgbmVlZCB0byBhbmVzdGhldGl6ZSB0aGVtIGZpcnN0LgFTYXZlIE91ciBTaGlwIDIAWW91IGNhbiB1c2UgZHJ1ZyBwb2xpY2llcyB0byBoYXZlIHlvdXIgZmlnaHRlcnMgY2FycnkgY29tYmF0IGRydWdzIGxpa2UgZ28tanVpY2UuIEEgcXVpY2sgZG9zZSBhdCB0aGUgc3RhcnQgb2YgY29tYmF0IGNhbiB3aW4gdGhlIGJhdHRsZS4BQ29yZQBTaHV0dGxlIGJheXMgYWxsb3cgY2FyZ28gYW5kIHBhc3NlbmdlcnMgdG8gZW50ZXIgYSBzaGlwIHdpdGhvdXQgZXZlciByaXNraW5nIHZhY3V1bSBleHBvc3VyZS4BU2F2ZSBPdXIgU2hpcCAyAFlvdSBjYW4gY2hhbmdlIHN0b3J5dGVsbGVyIGFuZCBwbGF5c3R5bGUgYXQgYW55IHRpbWUgdGhyb3VnaCB0aGUgb3B0aW9ucyBtZW51LgFDb3JlAFBzeWNoaWMgaW52aXNpYmlsaXR5IGRvZXNuJ3Qgd2VhciBvZmYgd2hlbiB5b3UgYXR0YWNrLgFSb3lhbHR5AEFuaW1hbHMgYXJlIG1vcmUgbGlrZWx5IHRvIGF0dGFjayB3aGVuIGhhcm1lZCBmcm9tIGNsb3NlIHJhbmdlLiBMb25nLXJhbmdlLCBzbG93LWZpcmluZyB3ZWFwb25zIGFyZSBzYWZlc3QgZm9yIGh1bnRpbmcuAUNvcmUAVGhlIEVtcGlyZSBiZXN0b3dzIGEgZnJlZSBsZXZlbCBvZiBwc3lsaW5rIHVwb24gYW55b25lIHdobyBlYXJucyB0aGUgdGl0bGUgcmVxdWlyZWQgdG8gdXNlIGl0LgFSb3lhbHR5AFNoaXAgY2FwYWNpdG9ycyBjb250YWluIGFuIGludGVncmF0ZWQgZnVzZSBzeXN0ZW0sIHByZXZlbnRpbmcgc2hvcnQtY2lyY3VpdCBldmVudHMuAVNhdmUgT3VyIFNoaXAgMgBJbiBhIGd1bmZpZ2h0LCBhbHdheXMgYmUgYmVoaW5kIGNvdmVyISBSaWdodC1jbGljayBhbmQgZHJhZyB0byBoYXZlIHlvdXIgZHJhZnRlZCBmaWdodGVycyBmb3JtIGEgbGluZS4BQ29yZQBXaGVuIHN0YXJ0aW5nIGEgbmV3IGdhbWUsIHlvdSBjYW4gY3JlYXRlIGN1c3RvbSB4ZW5vdHlwZXMgd2l0aCBhbnkgZ2VuZXRpYyBjb21iaW5hdGlvbiB5b3Ugd2FudC4BQmlvdGVjaABJbiBvcmRlciB0byBsYW5kLCBzaGlwcyByZXF1aXJlIGFuIGFyZWEgdGhhdCBzdXBwb3J0cyBoZWF2eSBjb25zdHJ1Y3Rpb24sIGlzIGZyZWUgb2YgYnVpbGRpbmdzLCBhbmQgaXMgbm90IHVuZGVyIGEgbW91bnRhaW4uAVNhdmUgT3VyIFNoaXAgMgBXaGVuIHRhcmdldGluZyBhIGNvbG9uaXN0IHdpdGggYW4gYWJpbGl0eSBvciBpdGVtLCB5b3UgY2FuIGFsc28gdGFyZ2V0IHRoZWlyIHBvcnRyYWl0IGluIHRoZSB0b3AgY29sb25pc3QgYmFyLgFDb3JlAE1vc3Qgd29tZW4gd2VhciBhIGJyYSB3aXRoIGEgdG9vIHNtYWxsIGN1cCBzaXplIGFuZCBhIHRvbyBsYXJnZSBiYW5kIHNpemUuAVJpbUpvYldvcmxkAENoaWxkcmVuIGNhbiBzbGVlcCBpbiB0aGUgc2FtZSByb29tIGFzIHBhcmVudHMgYW5kIG90aGVyIGNoaWxkcmVuIHdpdGhvdXQgYW55IG5lZ2F0aXZlIG1vb2QgZWZmZWN0LgFCaW90ZWNoAFlvdSBjYW4gcmlnaHQtY2xpY2sgYW5kIGRyYWcgdG8gcmVvcmRlciBjb2xvbmlzdHMgb24gdGhlIGNvbG9uaXN0IGJhci4BQ29yZQBUaGUgaG9sb2RlY2sgY2FuIHRyYWluIGFueSBza2lsbCwgZGVwZW5kaW5nIG9uIHRoZSBwcm9ncmFtIHlvdXIgY29sb25pc3Qgc2VsZWN0cyB3aGVuIHVzaW5nIGl0LiBNb3JlIGFkdmFuY2VkIGhvbG9kZWNrcyB0cmFpbiBza2lsbHMgZmFzdGVyLgFTYXZlIE91ciBTaGlwIDIAV2FudCB0byBmaW5pc2ggYSBiYXNpYyBBbm9tYWx5IHJlc2VhcmNoIHByb2plY3QgZmFzdGVyPyBBZHZhbmNlZCBlbnRpdGllcyB3aWxsIGNvbnRyaWJ1dGUgdG8geW91ciBjdXJyZW50IGJhc2ljIHJlc2VhcmNoIHByb2plY3QgaWYgeW91IGRvbuKAmXQgaGF2ZSBhbiBhY3RpdmUgYWR2YW5jZWQgcHJvamVjdC4BQW5vbWFseQBGcmVxdWVuY3kgb2YgbWFsZSBwYXducyB3aXRoIGJyZWFzdHMgYW5kIGZlbWFsZXMgd2l0aCBwZW5pc2VzIGNhbiBiZSBjb250cm9sbGVkIGluIFJpbUpvYldvcmxkIG1vZCBzZXR0aW5ncy4BUmltSm9iV29ybGQAUmltV29ybGQgaXMgYSBzdG9yeSBnZW5lcmF0b3IsIG5vdCBhIHNraWxsIHRlc3QuIEEgcnVpbmVkIGNvbG9ueSBpcyBhIGRyYW1hdGljIHRyYWdlZHksIG5vdCBhIGZhaWx1cmUuAUNvcmUATWFkZGVuZWQgYW5pbWFscyB3aWxsIGF0dGFjayBhbnkgaHVtYW4sIGluY2x1ZGluZyB5b3VyIGVuZW1pZXMuIFlvdSBjYW4gdXNlIHRoaXMuAUNvcmUATHVjaWZlcml1bSBjYW4gaGVhbCBzY2FycyAtIGV2ZW4gdGhvc2Ugb24gdGhlIGV5ZSBvciBicmFpbi4gSXQgaXMsIGhvd2V2ZXIsIGEgcGVybWFuZW50IGNvbW1pdG1lbnQuAUNvcmUAVGhlIGh1bnRlciBzdGVhbHRoIHN0YXQgcmVkdWNlcyB0aGUgY2hhbmNlIG9mIGFuaW1hbCBhdHRhY2tzLiBJdCBpcyBhZmZlY3RlZCBieSB0aGUgaHVudGVyJ3MgYW5pbWFscyBhbmQgc2hvb3Rpbmcgc2tpbGxzLgFDb3JlAFBzeWNoaWMgcG93ZXJzIGNhbiBnaXZlIHlvdSBzaWduaWZpY2FudCBhZHZhbnRhZ2UgaW4gY29tYmF0LgFSb3lhbHR5AFdoZW4gYm9hcmRpbmcgYW4gZW5lbXkgc2hpcCwgaXRzIGFpcmxvY2tzIGNhbiBiZSBicmVhY2hlZCB3aXRoIHRoZSBDb25zdHJ1Y3Rpb24gc2tpbGwgb3IgaGFja2VkIHdpdGggdGhlIEludGVsbGVjdHVhbCBza2lsbC4BU2F2ZSBPdXIgU2hpcCAyAFNvbWUgdG9vbHMgaW4gdGhlIE9yZGVycyBtZW51IGJlaGF2ZSBkaWZmZXJlbnRseSB3aGVuIHVzZWQgd2l0aCBtb2RpZmllciBrZXlzLiBIb3ZlciBvdmVyIHRoZSB0b29scyBmb3IgbW9yZSBpbmZvcm1hdGlvbi4BQWxsb3cgVG9vbABBbiBlbWVyZ2VuY3kgcHVyZ2UgcG9ydCBjYW4gZWplY3QgbW9sdGVuIHNpbHZlciBpbnRvIHNwYWNlLCBxdWlja2x5IHJlZHVjaW5nIGEgc2hpcCdzIHN0b3JlZCBoZWF0IC0gYWxiZWl0IGF0IGEgZmFudGFzdGljIGNvc3QuAVNhdmUgT3VyIFNoaXAgMgBUaGUgSW1wZXJpYWwgcm95YWwgdHJpYnV0ZSBjb2xsZWN0b3IgYXJyaXZlcyB0d2ljZSBwZXIgeWVhciwgYW5kIGFjY2VwdHMgcHJpc29uZXJzIGFuZCBnb2xkIGluIGV4Y2hhbmdlIGZvciBob25vci4BUm95YWx0eQBIZWF0c2lua3MgYW5kIGNvb2xhbnQgdGFua3MgYXJlIGNyaXRpY2FsIHRvIGEgc2hpcCdzIHBlcmZvcm1hbmNlIGluIGNvbWJhdC4gV2l0aG91dCBzdWZmaWNpZW50IGhlYXQgY2FwYWNpdHksIHNoaWVsZHMgY2FuJ3Qgc3RheSB1cCBhbmQgZW5lcmd5IHdlYXBvbnMgY2FuJ3QgZmlyZS4BU2F2ZSBPdXIgU2hpcCAyAEludmVudGVkIGJ5IGFuIGFyY2hvdGVjaCBzcG9yZSwgdGhlIFJlY3ljbG90cm9uIGlzIGNhcGFibGUgb2YgdGFraW5nIGFwYXJ0IG5lYXJseSBhbnkgb2JqZWN0IGF0IDEwMCUgZWZmaWNpZW5jeS4BU2F2ZSBPdXIgU2hpcCAyAFByZS13YXIgbWFpbmZyYW1lcyBjYW4gYmUgcHVyY2hhc2VkIGluIEJyb3RoZXJob29kIG9mIFN0ZWVsIHNldHRsZW1lbnRzIG9yIHZpYSBjYXJhdmFuIHRyYWRlcnMsIHByb3ZpZGVkIHlvdSBhcmUgbm90IGF0IHdhciB3aXRoIHRoZW0uAVRoZSBCcm90aGVyaG9vZCBDb21wZW5kaXVtICJDb250aW51ZWQiAFlvdSBjYW4gc2FmZWx5IHdhbGsgcmlnaHQgcGFzdCBhIGRvcm1hbnQgbWVjaCBjbHVzdGVyLCBhcyBsb25nIGFzIHlvdSBkb24ndCBhdHRhY2sgaXQgb3IgdHJpZ2dlciBhIHByb3hpbWl0eSBhY3RpdmF0b3IuAVJveWFsdHkAVGhlcmUgYXJlIGdyb3dpbmcgcnVtb3JzIG9mIGZyaWdodGVuaW5nIGZpZ3VyZXMgaW4gYmxhY2sgcG93ZXIgYXJtb3Igcm9hbWluZyB0aGUgZGVzZXJ0LgFUaGUgQnJvdGhlcmhvb2QgQ29tcGVuZGl1bSAiQ29udGludWVkIg=="

